var mqtt = require('mqtt'); //https://www.npmjs.com/package/mqtt
var Topic = '#'; //subscribe to all topics
// Adresse broker MQTT
var Broker_URL = 'mqtt://127.0.0.1';
// Adresse base de donnée
var Database_URL = '127.0.0.1';

// Options pour le broker MQTT
var options = {
	clientId: 'MyMQTT',
	port: 1883,
	username: 'mqtt_user',
	password: 'mqtt_user',	
	keepalive : 60
};

// Connexion MQTT et appel des différentes fonctions
var client  = mqtt.connect(Broker_URL, options);
client.on('connect', mqtt_connect);
client.on('reconnect', mqtt_reconnect);
client.on('error', mqtt_error);
client.on('message', mqtt_messsageReceived);
client.on('close', mqtt_close);

// Fonction de connexion
function mqtt_connect() {
    console.log("Connecting MQTT");
// Appel de la fonction subscribe()
    client.subscribe(Topic, mqtt_subscribe);
};

// Fonction subscribe
function mqtt_subscribe(err, granted) {
    console.log("Subscribed to " + Topic);
    if (err) {console.log(err);}
};

// Fonction de reconnexion
function mqtt_reconnect(err) {
    console.log("Reconnect MQTT");
    //if (err) {console.log(err);}

// Rappel de la fonction de connexion
	client  = mqtt.connect(Broker_URL, options);
};

// Fonction d'erreur
function mqtt_error(err) {
    console.log("Error!");
	//if (err) {console.log(err);}
};

function after_publish() {
	//do nothing
};

//rece MQTT broker
function mqtt_messsageReceived(topic, message, packet) {
	var message_str = message.toString(); //convert byte array to string
	message_str = message_str.replace(/\n$/, ''); //remove new line
	//payload syntax: clientID,topic,message

	if (countInstances(message_str) == 3) {
		insert_message(topic, message_str, packet);
		//console.log(message_str);
	} else {
		insert_message_parc(topic,message_str, packet);	
		console.log("Invalid payload");
	}
};

function mqtt_close() {
	//console.log("Close MQTT");
};

////////////////////////////////////////////////////
///////////////////// MYSQL ////////////////////////
////////////////////////////////////////////////////
var mysql = require('mysql'); //https://www.npmjs.com/package/mysql
//Create Connection
var connection = mysql.createConnection({
	host: Database_URL,
	user: "user",
	password: "user",
	database: "mydb",
	socketPath: '/var/run/mysqld/mysqld.sock'
});

connection.connect(function(err) {
	if (err) throw err;
	//console.log("Database Connected!");
});

//insert a row into the tbl_messages table
function insert_message(topic, message_str, packet) {
	var message_arr = extract_string(message_str); //split a string into an array	
	var type = message_arr[0];
	var serialNumber = message_arr[1];
	var mesure = message_arr[2];
	var location = message_arr[3];

	var sql = "INSERT INTO ?? (??,??,??,??,??) VALUES (?,?,?,?,?)";
	var params = ['tbl_message', 'topic','type', 'serialNumber', 'measurement', 'location' , topic, type, serialNumber, mesure, location];
	sql = mysql.format(sql, params);	
	
	connection.query(sql, function (error, results) {
		if (error) throw error;
		console.log("Message ajouté dans la table tbl_message " + message_str);
	}); 

	// mise à jour du statut du capteur	
        var sql = "UPDATE ?? SET ?? = 1 WHERE ?? = ?";
        var params = ['parc', 'status','serialNumber', serialNumber];
        sql = mysql.format(sql, params);

        connection.query(sql, function (error, results) {
                if (error) throw error;
                console.log("Mise à jour de la table parc " + message_str + "\n");
        });

};	

//insert a row into the parc table
function insert_message_parc(topic, message_str, packet) {
        var message_arr = extract_string(message_str); //split a string into an array

        var type = message_arr[0];
        var serialNumber = message_arr[1];
        var mesure = message_arr[2];
	// variable utile dans le cas ou l'on transmet la localisation par MQTT (ici location=default)
        var location = message_arr[3];
	
	var status = 0;
	var dAujourdhui = new Date();
	
	var rows_result_select;
	var sql_insert = "SELECT ?? FROM ?? WHERE ?? = ?";
        var params_insert = ['serialNumber', 'parc', 'serialNumber',serialNumber];
	sql_insert = mysql.format(sql_insert, params_insert);
	
        connection.query(sql_insert, function (error, rows, results) {
		if ( rows.length > 0 )  { 
      			var rows_result = rows[0];
			rows_result['serialNumber'];
			rows_result_select = rows_result['serialNumber'];
      			console.log('rows result' + rows_result_select);
    		} else {
	      		console.log("Pas de données");
    		}
		if (error){
                         throw error;
                }

                console.log("Demande si la sonde est déjà en défault : ");
 

		if(rows_result_select == serialNumber){
			console.log("Le default existe déjà");
			 // mise à jour du statut du capteur
        		var sql = "UPDATE ?? SET ?? = 0 WHERE ?? = ?";
        		var params = ['parc', 'status','serialNumber', serialNumber];
        		sql = mysql.format(sql, params);

        		connection.query(sql, function (error, results) {
                	if (error) throw error;
        		        console.log("Mise à jout de la table parc pour défault " + message_str);
	        	});

		}else{
        		var sql = "INSERT INTO ?? (??,??,??,??,??) VALUES (?,?,?,?,?)";
        		var params = ['parc', 'topic','serialNumber','type','dateTimeProduction', 'status', topic, serialNumber, type, dAujourdhui, status];
        		sql = mysql.format(sql, params);

        		connection.query(sql, function (error, results) {
                	if (error) throw error;
                		console.log("Message ajouté dans la table de gestion de parc : ");
        		});	
		}
	});
};



//split a string into an array of substrings
function extract_string(message_str) {
	var message_arr = message_str.split(","); //convert to array	
	return message_arr;
};	

//count number of delimiters in a string
var delimiter = ",";
function countInstances(message_str) {
	var substrings = message_str.split(delimiter);
	// console.log("taille:"+ (substrings.length - 1));
	return substrings.length - 1;
};
